#!groovy

// This CI/CD pipeline will execute within the container of a custom Jenkins image that includes the "3scale-toolbox-jenkins" shared library
// Documentation pertaining to this shared library can be found here:
//   1)  https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/
//   2)  https://github.com/rh-integration/3scale-toolbox-jenkins/blob/master/README.md

// TO-DO:  Explain why doesn't this groovy functionality just come out of the box with the the 3scale toolbox container image ?
library identifier: '3scale-toolbox-jenkins@master', 
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: 'https://github.com/rh-integration/3scale-toolbox-jenkins.git',
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait']]])

def service = null

node("maven") {
  stage('Checkout Source') {
    checkout scm
  }

  stage("Deploy API in Dev") {

    // create the ThreescaleService object from your API metadata manifest:
    service = toolbox.prepareThreescaleService(
        openapi: [filename: params.OPENAPI_SPECIFICATION_FILE ],
        environment: [ baseSystemName: params.API_BASE_SYSTEM_NAME,
                       publicBasePath: params.PUBLIC_BASE_PATH,
		       privateBaseUrl: params.DEV_PRIVATE_BASE_URL,
		       environmentName: params.DEV_PROJECT ],
        toolbox: [ openshiftProject: params.NAMESPACE,
                   destination: params.TARGET_INSTANCE_DEV,
                   image: params.TOOLBOX_IMAGE_REGISTRY,
                   insecure: params.DISABLE_TLS_VALIDATION == "yes",
                   secretName: params.SECRET_NAME],
        service: [:],
        applications: [
            [ name: params.APPLICATION_NAME + "-test-app", description: "This is used for development", plan: "dev", account: params.DEV_DEVELOPER_ACCOUNT_ID ]
        ],
        applicationPlans: [
          [ artefactFile: params.APPLICATION_PLAN]
        ]
    )

    // Import OpenAPI
    service.importOpenAPI()
    echo "Service with system_name ${service.environment.targetSystemName} created !"

    // Create an Application Plan
    service.applyApplicationPlans()

    def baseUrl = service.readProxy("sandbox").sandbox_endpoint
    def userKey = applications[0].userkey

    echo "baseUrl is ${baseUrl}"
    echo "userKey is ${userKey}"

    // Test staging
    sh "mvn -f api-testing/pom.xml test -Dtest=PetsRunner -DbaseUrl='${baseUrl}' -DuserKey=${userKey}"

    // Promote to production
    service.promoteToProduction()
  }

  stage("Deploy API in Test") {

    // create the ThreescaleService object from your API metadata manifest:
    service = toolbox.prepareThreescaleService(
        openapi: [filename: params.OPENAPI_SPECIFICATION_FILE ],
        environment: [ baseSystemName: params.API_BASE_SYSTEM_NAME,
                       publicBasePath: params.PUBLIC_BASE_PATH,
                       privateBaseUrl: params.TEST_PRIVATE_BASE_URL,
                       environmentName: params.TEST_PROJECT ],
        toolbox: [ openshiftProject: params.NAMESPACE,
                   destination: params.TARGET_INSTANCE_TEST,
                   image: params.TOOLBOX_IMAGE_REGISTRY,
                   insecure: params.DISABLE_TLS_VALIDATION == "yes",
                   secretName: params.SECRET_NAME],
        service: [:],
        applications: [
            [ name: params.APPLICATION_NAME + "-test-app", description: "This is used for testing", plan: "test", account: params.TEST_DEVELOPER_ACCOUNT_ID ]
        ],
        applicationPlans: [
          [ artefactFile: params.APPLICATION_PLAN]
        ]
    )

    // Import OpenAPI
    service.importOpenAPI()
    echo "Service with system_name ${service.environment.targetSystemName} created !"

    // Create an Application Plan
    service.applyApplicationPlans()

    // Promote to production
    service.promoteToProduction()
  }

  stage("Deploy API in Prod") {

    // Prepare
    service = toolbox.prepareThreescaleService(
        openapi: [filename: params.OPENAPI_SPECIFICATION_FILE ],
        environment: [ baseSystemName: params.API_BASE_SYSTEM_NAME,
                       publicBasePath: params.PUBLIC_BASE_PATH,
		       privateBaseUrl: params.PROD_PRIVATE_BASE_URL,
		       environmentName:  params.PROD_PROJECT ],
        toolbox: [ openshiftProject: params.NAMESPACE,
                   destination: params.TARGET_INSTANCE_PROD,
                   image: params.TOOLBOX_IMAGE_REGISTRY,
                   insecure: params.DISABLE_TLS_VALIDATION == "yes",
                   secretName: params.SECRET_NAME],
        service: [:],
        applications: [
            [ name: params.APPLICATION_NAME + "-prod-app", description: "This is used for production", plan: "prod", account: params.PROD_DEVELOPER_ACCOUNT_ID ]
        ],
        applicationPlans: [
          [ artefactFile: params.APPLICATION_PLAN]
        ]
    )
    // Import OpenAPI
    service.importOpenAPI()
    echo "Service with system_name ${service.environment.targetSystemName} created !"

    // Create an Application Plan
    service.applyApplicationPlans()

    // Promote to production
    service.promoteToProduction()
  }

}
