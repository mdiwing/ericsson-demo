#!groovy

// This CI/CD pipeline will execute within the container of a custom Jenkins image that includes the "3scale-toolbox-jenkins" shared library
// Documentation pertaining to this shared library can be found here:
//   1)  https://developers.redhat.com/blog/2019/07/31/using-the-3scale-toolbox-jenkins-shared-library/
//   2)  https://github.com/rh-integration/3scale-toolbox-jenkins/blob/master/README.md

// TO-DO:  Explain why doesn't this groovy functionality just come out of the box with the the 3scale toolbox container image ?
library identifier: '3scale-toolbox-jenkins@master', 
        retriever: modernSCM([$class: 'GitSCMSource',
                              remote: 'https://github.com/rh-integration/3scale-toolbox-jenkins.git',
                              traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait']]])

def service = null

node("maven") {
  stage('Checkout Source') {
    checkout scm
  }

  stage("Deploy Application in Dev") {
    openshift.withCluster() {
      openshift.withProject(params.DEV_PROJECT) {
        def bc = null

        try {
          bc = openshift.selector('bc', params.DEV_PROJECT)
          bc.startBuild()
        } catch (Exception e) {
          bc = openshift.newApp('registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift~'+params.GIT_REPO+' --context-dir='+params.APPLICATION_GIT_CONTEXT_DIR+' --name='+params.DEV_PROJECT).narrow('bc')
        }

        def builds = bc.related('builds')
        timeout(time: 10, unit: 'MINUTES') {
          builds.untilEach(1) {
              return it.object().status.phase == "Complete"
          }
        }

        //openshift.selector('dc', params.DEV_PROJECT).rollout().latest()
        def latestDeploymentVersion = openshift.selector('dc',params.DEV_PROJECT).object().status.latestVersion
        def rc = openshift.selector('rc', params.DEV_PROJECT+'-'+latestDeploymentVersion)
        
        timeout(time: 5, unit: 'MINUTES') {
          rc.untilEach(1){
            def rcMap = it.object()
            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
          }
        }
      }
    }
  }

  stage("Test Application in Dev") {
    sh "mvn -f api-testing/pom.xml test -Dtest=PetsRunner -DbaseUrl='${params.DEV_PRIVATE_BASE_URL}' -DapiKey=dummy"
    openshift.withCluster() {
      openshift.withProject(params.DEV_PROJECT) {
        openshift.tag(params.DEV_PROJECT+'/'+params.DEV_PROJECT+':latest',params.DEV_PROJECT+'/'+params.DEV_PROJECT+':test')
      }
    }
  }

try {
  stage("Deploy API in Dev") {

    // create the ThreescaleService object from your API metadata manifest:
    service = toolbox.prepareThreescaleService(
        openapi: [filename: params.OPENAPI_SPECIFICATION_FILE ],
        environment: [ baseSystemName: params.API_BASE_SYSTEM_NAME,
                       publicBasePath: params.PUBLIC_BASE_PATH,
		       privateBaseUrl: params.DEV_PRIVATE_BASE_URL,
		       environmentName: params.DEV_PROJECT ],
        toolbox: [ openshiftProject: params.NAMESPACE,
                   destination: params.TARGET_INSTANCE_DEV,
                   image: params.TOOLBOX_IMAGE_REGISTRY,
                   insecure: params.DISABLE_TLS_VALIDATION == "yes",
                   secretName: params.SECRET_NAME],
        service: [:],
        applications: [
            [ name: params.APPLICATION_NAME + "-dev-app", description: "This is used for development", plan: "dev", account: params.DEV_DEVELOPER_ACCOUNT_ID ]
        ],
        applicationPlans: [
          [ artefactFile: params.APPLICATION_PLAN]
        ]
    )

    // Import OpenAPI
    service.importOpenAPI()
    echo "Service with system_name ${service.environment.targetSystemName} created !"

    // Create an Application Plan
    service.applyApplicationPlans()

    // Create an Application
    service.applyApplication()

    def baseUrl = service.readProxy("sandbox").sandbox_endpoint

    def apiKey = service.applications[0].userkey

    echo "baseUrl is ${baseUrl}"
    echo "apiKey is ${apiKey}"

    // Test staging
    sh "mvn -f api-testing/pom.xml test -Dtest=PetsRunner -DbaseUrl='${baseUrl}' -DapiKey=${apiKey}"

    // Promote to production
    service.promoteToProduction()
  }
} catch (Exception e) {
   echo "Deploy API in Dev failed, but I will continue."
}

  stage("Deploy Application in Test") {
    openshift.withCluster() {
      openshift.withProject(params.TEST_PROJECT) {
        def dc = openshift.selector('dc', params.TEST_PROJECT)

        if (dc == null) {
          openshift.newApp(params.DEV_PROJECT+'/'+params.DEV_PROJECT+':test --name='+params.TEST_PROJECT)
        }

        def latestDeploymentVersion = openshift.selector('dc',params.TEST_PROJECT).object().status.latestVersion
        def rc = openshift.selector('rc', params.TEST_PROJECT+'-'+latestDeploymentVersion)

        timeout(time: 5, unit: 'MINUTES') {
          rc.untilEach(1){
            def rcMap = it.object()
            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
          }
        }
      }
    }
  }

  stage("Test Application in Test") {
    sh "mvn -f api-testing/pom.xml test -Dtest=PetsRunner -DbaseUrl='${params.TEST_PRIVATE_BASE_URL}' -DapiKey=dummy"
    openshift.withCluster() {
      openshift.withProject(params.TEST_PROJECT) {
        openshift.tag(params.TEST_PROJECT+'/'+params.TEST_PROJECT+':latest',params.TEST_PROJECT+'/'+params.TEST_PROJECT+':prod')
      }
    }
  }

  stage("Deploy API in Test") {

    // create the ThreescaleService object from your API metadata manifest:
    service = toolbox.prepareThreescaleService(
        openapi: [filename: params.OPENAPI_SPECIFICATION_FILE ],
        environment: [ baseSystemName: params.API_BASE_SYSTEM_NAME,
                       publicBasePath: params.PUBLIC_BASE_PATH,
                       privateBaseUrl: params.TEST_PRIVATE_BASE_URL,
                       environmentName: params.TEST_PROJECT ],
        toolbox: [ openshiftProject: params.NAMESPACE,
                   destination: params.TARGET_INSTANCE_TEST,
                   image: params.TOOLBOX_IMAGE_REGISTRY,
                   insecure: params.DISABLE_TLS_VALIDATION == "yes",
                   secretName: params.SECRET_NAME],
        service: [:],
        applications: [
            [ name: params.APPLICATION_NAME + "-test-app", description: "This is used for testing", plan: "dev", account: params.TEST_DEVELOPER_ACCOUNT_ID ]
        ],
        applicationPlans: [
          [ artefactFile: params.APPLICATION_PLAN]
        ]
    )

    // Import OpenAPI
    service.importOpenAPI()
    echo "Service with system_name ${service.environment.targetSystemName} created !"

    // Create an Application Plan
    service.applyApplicationPlans()

    // Create an Application
    service.applyApplication()

    def baseUrl = service.readProxy("sandbox").sandbox_endpoint

    def apiKey = service.applications[0].userkey

    echo "baseUrl is ${baseUrl}"
    echo "apiKey is ${apiKey}"

    // Test staging
    sh "mvn -f api-testing/pom.xml test -Dtest=PetsRunner -DbaseUrl='${baseUrl}' -DapiKey=${apiKey}"

    // Promote to production
    service.promoteToProduction()
  }

  stage("Deploy Application in Prod") {
    openshift.withCluster() {
      openshift.withProject(params.PROD_PROJECT) {
        def dc = openshift.selector('dc', params.PROD_PROJECT)

        if (dc == null) {
          openshift.newApp(params.TEST_PROJECT+'/'+params.TEST_PROJECT+':prod --name='+params.PROD_PROJECT)
        }

        def latestDeploymentVersion = openshift.selector('dc',params.PROD_PROJECT).object().status.latestVersion
        def rc = openshift.selector('rc', params.PROD_PROJECT+'-'+latestDeploymentVersion)

        timeout(time: 5, unit: 'MINUTES') {
          rc.untilEach(1){
            def rcMap = it.object()
            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
          }
        }
      }
    }
  }

  stage("Test Application in Prod") {
    sh "mvn -f api-testing/pom.xml test -Dtest=PetsRunner -DbaseUrl='${params.PROD_PRIVATE_BASE_URL}' -DapiKey=dummy"
  }

  stage("Deploy API in Prod") {

    // Prepare
    service = toolbox.prepareThreescaleService(
        openapi: [filename: params.OPENAPI_SPECIFICATION_FILE ],
        environment: [ baseSystemName: params.API_BASE_SYSTEM_NAME,
                       publicBasePath: params.PUBLIC_BASE_PATH,
		       privateBaseUrl: params.PROD_PRIVATE_BASE_URL,
		       environmentName:  params.PROD_PROJECT ],
        toolbox: [ openshiftProject: params.NAMESPACE,
                   destination: params.TARGET_INSTANCE_PROD,
                   image: params.TOOLBOX_IMAGE_REGISTRY,
                   insecure: params.DISABLE_TLS_VALIDATION == "yes",
                   secretName: params.SECRET_NAME],
        service: [:],
        applications: [
            [ name: params.APPLICATION_NAME + "-prod-app", description: "This is used for production", plan: "dev", account: params.PROD_DEVELOPER_ACCOUNT_ID ]
        ],
        applicationPlans: [
          [ artefactFile: params.APPLICATION_PLAN]
        ]
    )
    // Import OpenAPI
    service.importOpenAPI()
    echo "Service with system_name ${service.environment.targetSystemName} created !"

    // Create an Application Plan
    service.applyApplicationPlans()

    // Create an Application
    service.applyApplication()

    def baseUrl = service.readProxy("sandbox").sandbox_endpoint

    def apiKey = service.applications[0].userkey

    echo "baseUrl is ${baseUrl}"
    echo "apiKey is ${apiKey}"

    // Test staging
    sh "mvn -f api-testing/pom.xml test -Dtest=PetsRunner -DbaseUrl='${baseUrl}' -DapiKey=${apiKey}"

    // Promote to production
    service.promoteToProduction()
  }

}
